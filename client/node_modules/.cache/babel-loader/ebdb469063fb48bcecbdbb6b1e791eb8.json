{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pawjoshi\\\\Downloads\\\\graphql-demo\\\\graphql-demo\\\\client\\\\src\\\\App.js\";\nimport \"./App.css\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, from } from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport GetTodos from \"./Components/GetTodos\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst errorLink = onError(({\n  graphqlErrors\n}) => {\n  if (graphqlErrors) {\n    const gqlErrors = graphqlErrors.map(({\n      message,\n      location,\n      path\n    }) => {\n      return `Graphql error: ${message}`;\n    });\n    for (const error of gqlErrors) {\n      console.log(error);\n    }\n  }\n});\nconst link = from([errorLink, new HttpLink({\n  uri: \"http://localhost:5000/graphql\"\n})]);\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link\n});\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(GetTodos, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ApolloClient","InMemoryCache","ApolloProvider","HttpLink","from","onError","GetTodos","jsxDEV","_jsxDEV","errorLink","graphqlErrors","gqlErrors","map","message","location","path","error","console","log","link","uri","client","cache","App","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/pawjoshi/Downloads/graphql-demo/graphql-demo/client/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  from,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport GetTodos from \"./Components/GetTodos\";\n\nconst errorLink = onError(({ graphqlErrors }) => {\n  if (graphqlErrors) {\n    const gqlErrors = graphqlErrors.map(({ message, location, path }) => {\n      return (`Graphql error: ${message}`);\n    });\n    for (const error of gqlErrors) {\n      console.log(error);\n    }\n  }\n});\n\nconst link = from([\n  errorLink,\n  new HttpLink({ uri: \"http://localhost:5000/graphql\" }),\n]);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link,\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <GetTodos />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAW;AAClB,SACEA,YAAY,EACZC,aAAa,EACbC,cAAc,EACdC,QAAQ,EACRC,IAAI,QACC,gBAAgB;AACvB,SAASC,OAAO,QAAQ,2BAA2B;AACnD,OAAOC,QAAQ,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,SAAS,GAAGJ,OAAO,CAAC,CAAC;EAAEK;AAAc,CAAC,KAAK;EAC/C,IAAIA,aAAa,EAAE;IACjB,MAAMC,SAAS,GAAGD,aAAa,CAACE,GAAG,CAAC,CAAC;MAAEC,OAAO;MAAEC,QAAQ;MAAEC;IAAK,CAAC,KAAK;MACnE,OAAS,kBAAiBF,OAAQ,EAAC;IACrC,CAAC,CAAC;IACF,KAAK,MAAMG,KAAK,IAAIL,SAAS,EAAE;MAC7BM,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF;AACF,CAAC,CAAC;AAEF,MAAMG,IAAI,GAAGf,IAAI,CAAC,CAChBK,SAAS,EACT,IAAIN,QAAQ,CAAC;EAAEiB,GAAG,EAAE;AAAgC,CAAC,CAAC,CACvD,CAAC;AAEF,MAAMC,MAAM,GAAG,IAAIrB,YAAY,CAAC;EAC9BsB,KAAK,EAAE,IAAIrB,aAAa,CAAC,CAAC;EAC1BkB,IAAI,EAAEA;AACR,CAAC,CAAC;AAEF,SAASI,GAAGA,CAAA,EAAG;EACb,oBACEf,OAAA,CAACN,cAAc;IAACmB,MAAM,EAAEA,MAAO;IAAAG,QAAA,eAC7BhB,OAAA,CAACF,QAAQ;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAErB;AAACC,EAAA,GANQN,GAAG;AAQZ,eAAeA,GAAG;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}